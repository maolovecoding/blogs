import{_ as s,o as a,c as n,V as l}from"./chunks/framework.abf2da00.js";const C=JSON.parse('{"title":"interface","description":"","frontmatter":{},"headers":[],"relativePath":"android/06.func-interface.md","filePath":"android/06.func-interface.md","lastUpdated":1688349307000}'),p={name:"android/06.func-interface.md"},o=l(`<h1 id="interface" tabindex="-1">interface <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;interface&quot;">​</a></h1><p>普通接口和其他语言的接口类似。</p><h2 id="函数式接口" tabindex="-1">函数式接口 <a class="header-anchor" href="#函数式接口" aria-label="Permalink to &quot;函数式接口&quot;">​</a></h2><p>函数式接口只能有一个抽象函数。不过可以有多个非抽象成员。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fun </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    fun </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#A6ACCD;">:A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo implements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fun </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">MyClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="sam转换" tabindex="-1">SAM转换 <a class="header-anchor" href="#sam转换" aria-label="Permalink to &quot;SAM转换&quot;">​</a></h2><p>对于函数式接口，可以通过 lambda 表达式实现 SAM 转换，从而使代码更简洁、更有可读性。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fun </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    fun </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#A6ACCD;">:A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo implements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fun </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    MyClass().foo()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    val MyClass2 = A {  -&gt; println(&quot;foo ...&quot;) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    val MyClass2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo ...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    MyClass2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,8),e=[o];function t(c,r,F,D,y,i){return a(),n("div",null,e)}const f=s(p,[["render",t]]);export{C as __pageData,f as default};
